// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package encryptionatrestprivateendpoint

import (
	"context"
	"strings"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func PluralDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cloud_provider": schema.StringAttribute{
				Required:            true,
				Description:         "Human-readable label that identifies the cloud provider for the private endpoints to return.",
				MarkdownDescription: "Human-readable label that identifies the cloud provider for the private endpoints to return.",
			},
			"group_id": schema.StringAttribute{
				Required:            true,
				Description:         "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
			},
			"results": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cloud_provider": schema.StringAttribute{
							Computed:            true,
							Description:         "Human-readable label that identifies the cloud provider for the Encryption At Rest private endpoint.",
							MarkdownDescription: "Human-readable label that identifies the cloud provider for the Encryption At Rest private endpoint.",
						},
						"error_message": schema.StringAttribute{
							Computed:            true,
							Description:         "Error message for failures associated with the Encryption At Rest private endpoint.",
							MarkdownDescription: "Error message for failures associated with the Encryption At Rest private endpoint.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.",
							MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.",
						},
						"private_endpoint_connection_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Connection name of the Azure Private Endpoint.",
							MarkdownDescription: "Connection name of the Azure Private Endpoint.",
						},
						"region_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Cloud provider region in which the Encryption At Rest private endpoint is located.",
							MarkdownDescription: "Cloud provider region in which the Encryption At Rest private endpoint is located.",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "State of the Encryption At Rest private endpoint.",
							MarkdownDescription: "State of the Encryption At Rest private endpoint.",
						},
					 },
					CustomType: ResultsType{
						ObjectType: types.ObjectType{
							AttrTypes: ResultsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of returned documents that MongoDB Cloud providers when completing this request.",
				MarkdownDescription: "List of returned documents that MongoDB Cloud providers when completing this request.",
			},
			"total_count": schema.Int64Attribute{
				Computed:            true,
				Description:         "Total number of documents available. MongoDB Cloud omits this value if `includeCount` is set to `false`.",
				MarkdownDescription: "Total number of documents available. MongoDB Cloud omits this value if `includeCount` is set to `false`.",
			},
		},
	}
}

type TFEncryptionAtRestPrivateEndpointsDSModel struct {
	CloudProvider types.String `tfsdk:"cloud_provider"`
	GroupId       types.String `tfsdk:"group_id"`
	Results       types.List   `tfsdk:"results"`
	TotalCount    types.Int64  `tfsdk:"total_count"`
}

var _ basetypes.ObjectTypable = ResultsType{}

type ResultsType struct {
	basetypes.ObjectType
}

func (t ResultsType) Equal(o attr.Type) bool {
	other, ok := o.(ResultsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResultsType) String() string {
	return "ResultsType"
}

func (t ResultsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cloudProviderAttribute, ok := attributes["cloud_provider"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cloud_provider is missing from object`)

		return nil, diags
	}

	cloudProviderVal, ok := cloudProviderAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cloud_provider expected to be basetypes.StringValue, was: %T`, cloudProviderAttribute))
	}

	errorMessageAttribute, ok := attributes["error_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_message is missing from object`)

		return nil, diags
	}

	errorMessageVal, ok := errorMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_message expected to be basetypes.StringValue, was: %T`, errorMessageAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	privateEndpointConnectionNameAttribute, ok := attributes["private_endpoint_connection_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_endpoint_connection_name is missing from object`)

		return nil, diags
	}

	privateEndpointConnectionNameVal, ok := privateEndpointConnectionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_endpoint_connection_name expected to be basetypes.StringValue, was: %T`, privateEndpointConnectionNameAttribute))
	}

	regionNameAttribute, ok := attributes["region_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region_name is missing from object`)

		return nil, diags
	}

	regionNameVal, ok := regionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region_name expected to be basetypes.StringValue, was: %T`, regionNameAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResultsValue{
		CloudProvider:                 cloudProviderVal,
		ErrorMessage:                  errorMessageVal,
		Id:                            idVal,
		PrivateEndpointConnectionName: privateEndpointConnectionNameVal,
		RegionName:                    regionNameVal,
		Status:                        statusVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewResultsValueNull() ResultsValue {
	return ResultsValue{
		state: attr.ValueStateNull,
	}
}

func NewResultsValueUnknown() ResultsValue {
	return ResultsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResultsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResultsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResultsValue Attribute Value",
				"While creating a ResultsValue value, a missing attribute value was detected. "+
					"A ResultsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResultsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResultsValue Attribute Type",
				"While creating a ResultsValue value, an invalid attribute value was detected. "+
					"A ResultsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResultsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResultsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResultsValue Attribute Value",
				"While creating a ResultsValue value, an extra attribute value was detected. "+
					"A ResultsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResultsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResultsValueUnknown(), diags
	}

	cloudProviderAttribute, ok := attributes["cloud_provider"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cloud_provider is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	cloudProviderVal, ok := cloudProviderAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cloud_provider expected to be basetypes.StringValue, was: %T`, cloudProviderAttribute))
	}

	errorMessageAttribute, ok := attributes["error_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_message is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	errorMessageVal, ok := errorMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_message expected to be basetypes.StringValue, was: %T`, errorMessageAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	privateEndpointConnectionNameAttribute, ok := attributes["private_endpoint_connection_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_endpoint_connection_name is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	privateEndpointConnectionNameVal, ok := privateEndpointConnectionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_endpoint_connection_name expected to be basetypes.StringValue, was: %T`, privateEndpointConnectionNameAttribute))
	}

	regionNameAttribute, ok := attributes["region_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region_name is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	regionNameVal, ok := regionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region_name expected to be basetypes.StringValue, was: %T`, regionNameAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return NewResultsValueUnknown(), diags
	}

	return ResultsValue{
		CloudProvider:                 cloudProviderVal,
		ErrorMessage:                  errorMessageVal,
		Id:                            idVal,
		PrivateEndpointConnectionName: privateEndpointConnectionNameVal,
		RegionName:                    regionNameVal,
		Status:                        statusVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewResultsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResultsValue {
	object, diags := NewResultsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResultsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResultsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResultsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResultsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResultsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResultsValueMust(ResultsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResultsType) ValueType(ctx context.Context) attr.Value {
	return ResultsValue{}
}

var _ basetypes.ObjectValuable = ResultsValue{}

type ResultsValue struct {
	CloudProvider                 basetypes.StringValue `tfsdk:"cloud_provider"`
	ErrorMessage                  basetypes.StringValue `tfsdk:"error_message"`
	Id                            basetypes.StringValue `tfsdk:"id"`
	PrivateEndpointConnectionName basetypes.StringValue `tfsdk:"private_endpoint_connection_name"`
	RegionName                    basetypes.StringValue `tfsdk:"region_name"`
	Status                        basetypes.StringValue `tfsdk:"status"`
	state                         attr.ValueState
}

func (v ResultsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["cloud_provider"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["error_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_endpoint_connection_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.CloudProvider.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cloud_provider"] = val

		val, err = v.ErrorMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["error_message"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.PrivateEndpointConnectionName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_endpoint_connection_name"] = val

		val, err = v.RegionName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region_name"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResultsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResultsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResultsValue) String() string {
	return "ResultsValue"
}

func (v ResultsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cloud_provider":                   basetypes.StringType{},
		"error_message":                    basetypes.StringType{},
		"id":                               basetypes.StringType{},
		"private_endpoint_connection_name": basetypes.StringType{},
		"region_name":                      basetypes.StringType{},
		"status":                           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cloud_provider":                   v.CloudProvider,
			"error_message":                    v.ErrorMessage,
			"id":                               v.Id,
			"private_endpoint_connection_name": v.PrivateEndpointConnectionName,
			"region_name":                      v.RegionName,
			"status":                           v.Status,
		})

	return objVal, diags
}

func (v ResultsValue) Equal(o attr.Value) bool {
	other, ok := o.(ResultsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CloudProvider.Equal(other.CloudProvider) {
		return false
	}

	if !v.ErrorMessage.Equal(other.ErrorMessage) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.PrivateEndpointConnectionName.Equal(other.PrivateEndpointConnectionName) {
		return false
	}

	if !v.RegionName.Equal(other.RegionName) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	return true
}

func (v ResultsValue) Type(ctx context.Context) attr.Type {
	return ResultsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResultsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cloud_provider":                   basetypes.StringType{},
		"error_message":                    basetypes.StringType{},
		"id":                               basetypes.StringType{},
		"private_endpoint_connection_name": basetypes.StringType{},
		"region_name":                      basetypes.StringType{},
		"status":                           basetypes.StringType{},
	}
}
